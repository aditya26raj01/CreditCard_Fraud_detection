# -*- coding: utf-8 -*-
"""ML___Credit_Card_Fraud_Detection (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oqGODb359SKHgW8vG0jWXuNZ0e1Iy28i

# Importing all the necessary Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import gridspec

"""#Loading the Data"""

data = pd.read_csv("creditcard.csv")

"""#Understanding the Data"""

data.head()

"""#Describing the Data"""

print(data.shape)
print(data.describe())

"""#Imbalance in the data"""

fraud = data[data['Class'] == 1]
valid = data[data['Class'] == 0]
outlierFraction = len(fraud)/float(len(valid))
print(outlierFraction)
print('Fraud Cases: {}'.format(len(data[data['Class'] == 1])))
print('Valid Transactions: {}'.format(len(data[data['Class'] == 0])))

"""#Print the amount details for Fraudulent Transaction"""

print("Amount details of the fraudulent transaction")
fraud.Amount.describe()

"""# Print the amount details for Normal Transaction"""

print("details of valid transaction")
valid.Amount.describe()

"""#Plotting the Correlation Matrix"""

corrmat = data.corr()
fig = plt.figure(figsize = (12, 9))
sns.heatmap(corrmat, vmax = .8, square = True)
plt.show()

"""#Separating the X and the Y values"""

# dividing the X and the Y from the dataset
X = data.drop(['Class'], axis = 1)
Y = data["Class"]
print(X.shape)
print(Y.shape)
# getting just the values for the sake of processing
# (its a numpy array with no columns)
xData = X.values
yData = Y.values

"""#Training and Testing Data Bifurcation"""

# Using Scikit-learn to split data into training and testing sets
from sklearn.model_selection import train_test_split
# Split the data into training and testing sets
xTrain, xTest, yTrain, yTest = train_test_split(
        xData, yData, test_size = 0.2, random_state = 42)

"""#Building a Random Forest Model using scikit learn"""

# Building the Random Forest Classifier (RANDOM FOREST)
from sklearn.ensemble import RandomForestClassifier
# random forest model creation
rfc = RandomForestClassifier()
rfc.fit(xTrain, yTrain)
# predictions
yPred = rfc.predict(xTest)

"""# Building all kinds of evaluating parameters"""

!pip install joblib

import joblib

joblib.dump(rfc, 'rfc_model.pkl')
print("Model saved as rfc_model.pkl")